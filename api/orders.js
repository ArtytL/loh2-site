// /api/orders.js

// ‡πÉ‡∏ä‡πâ Node runtime (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Edge) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ fetch/stream ‡πÅ‡∏•‡∏∞ library ‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö
export const config = { runtime: "nodejs" };

/**
 * ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡πà‡∏≤‡∏ô body ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏£‡∏ì‡∏µ:
 * - ‡∏ñ‡πâ‡∏≤ Vercel parse ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß (object) ‡∏Å‡πá‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏•‡∏¢
 * - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string (‡πÄ‡∏ä‡πà‡∏ô‡∏™‡πà‡∏á text/plain ‡∏°‡∏≤) ‡∏à‡∏∞‡∏•‡∏≠‡∏á JSON.parse
 * - ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏≠‡πà‡∏≤‡∏ô raw stream ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse ‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö
 */
async function readBody(req) {
  if (req.body && typeof req.body === "object") return req.body;

  if (typeof req.body === "string") {
    try {
      return JSON.parse(req.body);
    } catch {
      // ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏Ç‡∏≠‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å stream
    }
  }

  // ‡∏≠‡πà‡∏≤‡∏ô raw ‡∏à‡∏≤‡∏Å stream ‡∏Å‡∏£‡∏ì‡∏µ body ‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á
  const chunks = [];
  for await (const ch of req) chunks.push(Buffer.from(ch));
  const raw = Buffer.concat(chunks).toString("utf8").trim();
  if (!raw) return {};
  try {
    return JSON.parse(raw);
  } catch {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô form-urlencoded ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏Å‡πá‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô string ‡πÑ‡∏õ
    return { _raw: raw };
  }
}

/** ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ */
function buildSummary(data) {
  const {
    name = "",
    email = "",
    phone = "",
    address = "",
    note = "",
    cart = [],
    shipping = 0,
    total = 0,
  } = data || {};

  const lines = [];
  lines.push("üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà");
  lines.push("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
  lines.push(`‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${name || "-"}`);
  lines.push(`‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${email || "-"}`);
  lines.push(`‡πÇ‡∏ó‡∏£: ${phone || "-"}`);
  lines.push(`‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á: ${address || "-"}`);
  if (note) lines.push(`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${note}`);
  lines.push("");
  lines.push("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:");
  lines.push("--------------------");

  let subtotal = 0;
  for (const item of cart || []) {
    const id = item.id || "-";
    const title = item.title || "-";
    const type = item.type || "-";
    const qty = Number(item.qty || 0);
    const price = Number(item.price || 0);
    const sum = qty * price;
    subtotal += sum;
    lines.push(`‚Ä¢ [${id}] ${title} (${type}) x ${qty} = ${sum} ‡∏ö‡∏≤‡∏ó`);
  }

  lines.push("--------------------");
  lines.push(`‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${subtotal} ‡∏ö‡∏≤‡∏ó`);
  lines.push(`‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á: ${Number(shipping || 0)} ‡∏ö‡∏≤‡∏ó`);
  lines.push(`‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: ${Number(total || subtotal + Number(shipping || 0))} ‡∏ö‡∏≤‡∏ó`);

  return lines.join("\n");
}

export default async function handler(req, res) {
  // ‡∏ï‡∏±‡πâ‡∏á CORS ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡πÇ‡∏î‡πÄ‡∏°‡∏ô (‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏•‡πá‡∏≠‡∏Ñ‡πÇ‡∏î‡πÄ‡∏°‡∏ô ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô * ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST,OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö preflight
  if (req.method === "OPTIONS") {
    res.status(204).end();
    return;
  }

  if (req.method !== "POST") {
    res.status(405).json({ ok: false, error: "Method Not Allowed" });
    return;
  }

  try {
    const data = await readBody(req);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!data || !Array.isArray(data.cart) || (data.cart || []).length === 0) {
      res.status(400).json({ ok: false, error: "Invalid payload: cart is empty" });
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
    const message = buildSummary(data);

    // ==== ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á webhook / email API ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô ENV ====
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ ORDER_WEBHOOK_URL ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≠‡∏¢‡πÉ‡∏ä‡πâ EMAIL_API_URL
    const forwardUrl =
      process.env.ORDER_WEBHOOK_URL || process.env.EMAIL_API_URL || null;

    if (forwardUrl) {
      const r = await fetch(forwardUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        // ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á raw data ‡πÅ‡∏•‡∏∞ summary ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏≠‡∏á
        body: JSON.stringify({ ...data, summary: message }),
      });

      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á fail ‡∏ñ‡πâ‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ï‡∏≠‡∏ö non-2xx ‚Äî ‡πÅ‡∏ï‡πà log ‡πÑ‡∏ß‡πâ‡∏ä‡πà‡∏ß‡∏¢ debug
      if (!r.ok) {
        const text = await r.text().catch(() => "");
        console.warn("Forward failed:", r.status, text);
      }
    } else {
      console.log("No ORDER_WEBHOOK_URL/EMAIL_API_URL set ‚Äî skip forwarding.");
      console.log("Order summary:\n" + message);
    }

    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    res.status(200).json({ ok: true });
  } catch (err) {
    console.error("orders error:", err);
    res.status(500).json({ ok: false, error: String(err?.message || err) });
  }
}
